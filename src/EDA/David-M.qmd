---
title: "EDA: David-M"
format: html
editor: visual
---

## Data Import

```{r}
library(tidyverse)
library(here)
```


```{r}
dating_app_data <- read.csv('../../data/dating_app_behavior_dataset.csv')
```

## Initial Exploration of Data

```{r}
dim(dating_app_data)

head(dating_app_data, 20)
```
```{r}
dating_app_data |>
  group_by(gender) |>
  summarize(gender_count = n())

dating_app_data |>
  group_by(sexual_orientation) |>
  summarize(orientation_count = n())

dating_app_data |>
  group_by(location_type) |>
  summarize(location_count = n())

dating_app_data |>
  group_by(income_bracket) |>
  summarize(income_count = n())

dating_app_data |>
  group_by(education_level) |>
  summarize(education_count = n())
```
::: {.callout-note title="Reflection"}
The dataset has a fairly even distribution across categories, which, while not entirely realistic, allows for more reliable analysis. Since the data is simulated, itâ€™ll be interesting to compare it to actual dating app experiences. 
:::

## Exploring data points individually

```{r}
ggplot(dating_app_data, aes(x = app_usage_time_min)) +
  geom_bar()

ggplot(dating_app_data, aes(x = swipe_right_ratio)) +
  geom_boxplot()
```




## Research Qs

**Research Question:**
What is the most common interest tag?
```{r}
library(stringr)
 
common_tags <- c("music", "hiking", "movies", "travel", "fitness", "food", "books", "dancing", "photography", "art", "tattoos", "yoga", "pets", "DIY", "traveling", "languages", "writing", "painting", "coding")

tag_counts <- sapply(common_tags, function(tag) sum(str_detect(dating_app_data$interest_tags, tag)))

tag_counts_df <- data.frame(tag = common_tags, count = tag_counts)

tag_counts_df <- tag_counts_df[order(-tag_counts_df$count), ]
head(tag_counts_df, 1)

```
```{r}
ggplot(tag_counts_df, aes(x = reorder(tag, count), y = count, fill = tag)) +
  geom_bar(stat = "identity") +
  coord_flip() + 
  labs(title = "Most Common Interest Tags", x = "Interest Tag", y = "Count") +
  theme_minimal() +
  theme(legend.position = "none")
```


**Research Question:**
How does income impact app dependence? 
```{r}
ggplot(dating_app_data, aes(fill=income_bracket,x=app_usage_time_min)) +
         geom_bar(alpha = 0.5)

dating_app_data |>
  group_by(location_type) |>
  mutate(location_mean_usage = mean(app_usage_time_min)) |>
ggplot(aes(x=location_type, y=location_mean_usage)) +
  geom_col()
```

**Research Question:**
Are there income differences in dating app behavior and expectations?
```{r}
# Load required libraries
library(ggplot2)
library(dplyr)

# Ensure income_bracket is an ordered factor
dating_app_data$income_bracket <- factor(dating_app_data$income_bracket, 
                                         levels = c("Very Low", "Low", "Middle", "Upper-Middle", "High"),
                                         ordered = TRUE)

# Create the trivariate plot with facet by match_outcome
ggplot(dating_app_data, aes(x = income_bracket, fill = app_usage_time_label)) +
  geom_bar(position = "dodge") +
  facet_wrap(~match_outcome) +
  labs(title = "Match Outcome by Income and App Usage Time",
       x = "Income Bracket",
       y = "Count",
       fill = "App Usage Time") +
  theme_minimal() +
  theme(legend.position = "top",
        plot.title = element_text(hjust = 0.5))
```

```{r}
# Load required libraries
library(ggplot2)
library(dplyr)

# Ensure income_bracket is an ordered factor
dating_app_data$income_bracket <- factor(dating_app_data$income_bracket, 
                                         levels = c("Very Low", "Low", "Middle", "Upper-Middle", "High"),
                                         ordered = TRUE)

filtered_dates <- dating_app_data %>%
  mutate(match_outcome_clean = tolower(str_trim(match_outcome))) %>%
  filter(!match_outcome_clean %in% c("Catfished", "No Action", "One-sided Like", "Instant Match", "Chat Ignored", "Mutual Match"))

ggplot(filtered_dates, aes(y = income_bracket, fill = app_usage_time_label)) +
  geom_bar(position = "dodge") +
  facet_wrap(~match_outcome) +
  labs(title = "Match Outcomes by Income & App Usage Time",
       x = "Count of People",
       y = "Income Bracket",
       fill = "App Usage Time") +
  theme_minimal() +
  theme(legend.position = "top",
        plot.title = element_text(hjust = 0.5))
```



```{r}
#| echo: false
2 * 2
```

